
article {
    --max-text-width: 70ch;
}

article  h1,
article  h2,
article  h3,
article  h4,
article  h5,
article  p,
article table {
    max-width: var(--max-text-width);
}

.post-title {
    font-size: var(--font-size-3xl);
    text-decoration: underline;
    text-decoration-style: dotted;
    text-decoration-thickness: 0.25rem;
    margin-block-end: var(--font-size-sm);
}

.post-metadata {
    margin-block-end: var(--font-size-md);
}

article .wrapper {
    display: grid;
    grid-template-columns: fit-content(Min(100%, var(--max-text-width))) auto;
    gap: var(--font-size-3xl);
}

article .post-content {
    --section-padding: 0.5rem;
    --section-margin-base: var(--font-size-3xl);


    & :first-child {
        margin-block-start: 0;
    }

    & h1 {
        border-inline-start: 0.5rem solid;
        padding-inline-start: var(--section-padding);

        &:not(:first-child) {
            margin-block-start: calc(2 * var(--section-margin-base));
        }
    }

    & h2 {
        border-inline-start: 1rem solid var(--text);
        padding-inline-start: var(--section-padding);
        margin-block-start: calc(1.5 * var(--section-margin-base));
    }

    & h3 {
        border-inline-start: 1.5rem solid var(--text);
        padding-inline-start: var(--section-padding);
        margin-block-start: calc(0.5 * var(--section-margin-base));
    }

    & img {
        display: flex;
        flex-direction: row;
        align-items: center;

        margin-inline: auto;
        width: 50%;

        padding: 0.5rem;
        border: 0.1rem solid var(--text);
    }

    & h1:target, & h2:target, & h3:target, & h4:target, & h5:target, & section:target {
        --tbg: var(--target-bg, var(--accent));
        background: var(--tbg);
    }

    & a[href^="http"]::after {
        content: ' \29C9';
        text-decoration: none;
    }
}

@media screen and (max-width: 1300px) {
    aside nav#TableOfContents {
        max-height: 25rem;
    }
}


// NOTE: This hack is needed to place the ToC before the content at smalle
//       screen sizes.
//       Remember that the ToC comes _after_ the content in the HTML to have it
//       go on the right side of the page.
//
//       Here we create two rows and place the items accordingly.
//
//       Exchanging the positions in the HTML results in the same hack but done
//       on the columns. Life is hard.
@media screen and (max-width: 800px) {
    article .wrapper {
        grid-template-columns: 1fr;
        grid-template-rows: [toc] auto [content] auto;
    }

    article .post-content {
        grid-row: content;
    }

    article aside.toc {
        grid-row: toc;
    }
}

aside nav#TableOfContents {
    top: var(--font-size-md);
    position: sticky;
    border-inline-start: var(--border-size-md) solid;
    padding: 0 var(--font-size-md);
    overflow-y: scroll;
    max-height: 35rem;

    // Shadow code taken from CSS-Tricks:
    // https://css-tricks.com/books/greatest-css-tricks/scroll-shadows/
    background:
      /* Shadow Cover TOP */
      linear-gradient(
        var(--page-bg) 30%,
        rgba(255, 255, 255, 0)
      ) center top,

      /* Shadow Cover BOTTOM */
      linear-gradient(
        rgba(255, 255, 255, 0), 
        var(--page-bg) 70%
      ) center bottom,

      /* Shadow TOP */
      radial-gradient(
        farthest-side at 50% 0,
        var(--scroll-shadow, rgba(0, 0, 0, 0.2)),
        rgba(0, 0, 0, 0)
      ) center top,

      /* Shadow BOTTOM */
      radial-gradient(
        farthest-side at 50% 100%,
        var(--scroll-shadow, rgba(0, 0, 0, 0.2)),
        rgba(0, 0, 0, 0)
      ) center bottom;

    background-repeat: no-repeat;
    background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;
    background-attachment: local, local, scroll, scroll;

    & a {
        text-decoration: none;
    }

    & ul, & ol {
        list-style-type: none;
        padding-inline-start: 1rem;

        counter-reset: toc-counter;

        & li::before {
            content: counters(toc-counter, ".") " ";
            counter-increment: toc-counter;

            color: var(--text);
        }
    }

    & > ol {
        padding: 0;
    }
}

